#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri Sep 15 12:42:39 2017

@author: KarimM
"""
import numpy as np
from numpy import genfromtxt


def sigmoid(z):
    return 1.0 / (1.0 + np.exp(-z))

def sigmoid_diff(z):
    return z * (1.0 - z)

def softmax(x):
    """Compute the softmax of vector x in a numerically stable way."""
    shiftx = x - np.max(x)
    exps = np.exp(shiftx)
    return exps / np.sum(exps)

def init_net(inputs,hidden,outputs):
    network = list()
    input_to_hidden = np.random.rand(hidden,inputs+1)
    hidden_to_output = np.random.rand(outputs,hidden+1)
    network.append(input_to_hidden)
    network.append(hidden_to_output)
    return network
    

def forward_prop(net,inputs):
    inputs = np.append(inputs,1)
    H_hidden = sigmoid(np.dot(net[0],inputs))
    H_hidden = np.append(H_hidden,1)
    Outputs = sigmoid(np.dot(net[1],H_hidden))
    return [H_hidden, Outputs]

def back_prop(network,expected,inputs,l_rate):
    [hidden_output, outputs] = forward_prop(network,inputs)
    inputs = np.append(inputs,1)
    dE_dO = expected - outputs
    dE_dZo = dE_dO * sigmoid_diff(outputs)
    dE_dWh = np.dot(np.reshape(dE_dZo,[len(dE_dZo),1]),np.reshape(hidden_output,[1,len(hidden_output)])) # I want [dE_dZo] as a vertical vector dot produt by hidden outputs as horizontal -> this gives weight update for each weight
    dE_dZh = np.dot(dE_dZo,network[1][:,:-1]) * sigmoid_diff(hidden_output[:-1])
    dE_dWo = np.dot(np.reshape(dE_dZh,[len(dE_dZh),1]),np.reshape(inputs,[1,len(inputs)])) # same as dE_dWh [figure out]
    #updating weights
    network[1] += l_rate * dE_dWh
    network[0] += l_rate * dE_dWo
    
def train(network,dataset,iterations,n_outputs,l_rate):
    errors = list()
    for i in range(iterations):
        sum_error = 0
        for row in dataset:
            expected = [0 for k in range(n_outputs)]
            expected[row[-1]] = 1
            sum_error += sum((expected - forward_prop(network,row[:-1])[1])**2)
            back_prop(network,expected,row[:-1],l_rate)
        errors.append(sum_error)
        if (i % 100 == 0):
            print 'error is',sum_error
    return errors 


"""
x_training = genfromtxt('../data/Question2_123/x_train.csv',delimiter = ",")
y_training = genfromtxt('../data/Question2_123/y_train.csv',delimiter = ",")
x_training = x_training.astype(int)
y_training = y_training.astype(int)
y_training = y_training.reshape([len(y_training),1])
TrainData = np.append(x_training, y_training, axis=1)  


network = init_net(14,100,4)
train(network,TrainData,1000,4,0.01)
"""

"""
Evaluation Section
"""

def predict(network, row):
    outputs = forward_prop(network, row)[1]
    return np.argmax(outputs)

# Calculate accuracy percentage
def accuracy_metric(actual, predicted):
	correct = 0
	for i in range(len(actual)):
		if actual[i] == predicted[i]:
			correct += 1
	return correct / float(len(actual)) * 100.0

def testingNetwork(dataSet,network):
    predictions = []
    for i in range(len(dataSet)):
        predictions.append(predict(network,dataSet[i][:-1]))
    actual = [row[-1] for row in dataSet]
    return accuracy_metric(actual,predictions)


"""
from sklearn import datasets
dataset = sklearn.datasets.load_breast_cancer(return_X_y=False)        
data = dataset.data[:,0:10]
all_data = np.append(data, dataset.target.reshape([len(data),1]), 1)
network = init_net(10,5,1)
train(network,all_data,100)
"""
"""
x_test = genfromtxt("/Users/KarimM/Google Drive/PhD/Courses/Deep Learning/assignment1/Question2_123/x_test.csv",delimiter = ",")
y_test = genfromtxt("/Users/KarimM/Google Drive/PhD/Courses/Deep Learning/assignment1/Question2_123/y_test.csv",delimiter = ",")
x_test = x_test.astype(int)
y_test = y_test.astype(int)
y_test = y_test.reshape([len(y_test),1])
TestData = np.append(x_test, y_test, axis=1)     
"""